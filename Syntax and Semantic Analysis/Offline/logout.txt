Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme x found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 1: Token <ID> Lexeme y found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 1: Token <ID> Lexeme z found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
Line# 2: Token <FLOAT> Lexeme float found
type_specifier : FLOAT
Line# 2: Token <ID> Lexeme a found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : program unit
Line# 4: Token <INT> Lexeme int found
type_specifier : INT
Line# 4: Token <ID> Lexeme var found
Line# 4: Token <LPAREN> Lexeme ( found
Line# 4: Token <INT> Lexeme int found
type_specifier : INT
Line# 4: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 4: Token <COMMA> Lexeme , found
Line# 4: Token <INT> Lexeme int found
type_specifier : INT
Line# 4: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 4: Token <RPAREN> Lexeme ) found
Line# 4: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
unit : func_declaration
program : program unit
Line# 6: Token <INT> Lexeme int found
type_specifier : INT
Line# 6: Token <ID> Lexeme foo3 found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <INT> Lexeme int found
type_specifier : INT
Line# 6: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 6: Token <COMMA> Lexeme , found
Line# 6: Token <INT> Lexeme int found
type_specifier : INT
Line# 6: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 6: Token <RPAREN> Lexeme ) found
Line# 6: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
unit : func_declaration
program : program unit
Line# 8: Token <INT> Lexeme int found
type_specifier : INT
Line# 8: Token <ID> Lexeme func found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <INT> Lexeme int found
type_specifier : INT
Line# 8: Token <ID> Lexeme c found
parameter_list : type_specifier ID
Line# 8: Token <COMMA> Lexeme , found
Line# 8: Token <INT> Lexeme int found
type_specifier : INT
Line# 8: Token <ID> Lexeme d found
parameter_list : parameter_list COMMA type_specifier ID
Line# 8: Token <RPAREN> Lexeme ) found
Line# 9: Token <LCURL> Lexeme { found
Line# 10: Token <RETURN> Lexeme return found
Line# 10: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 11: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.1
	1--> <c,INT> 
	2--> <d,INT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> 
	10--> <a,FLOAT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme correct_foo found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 13: Token <COMMA> Lexeme , found
Line# 13: Token <FLOAT> Lexeme float found
type_specifier : FLOAT
Line# 13: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 13: Token <RPAREN> Lexeme ) found
Line# 14: Token <LCURL> Lexeme { found
Line# 15: Token <RETURN> Lexeme return found
Line# 15: Token <ID> Lexeme a found
Line# 15: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 15: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 15: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 16: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.2
	10--> <a,INT> 
	11--> <b,FLOAT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> 
	10--> <a,FLOAT> <func,FUNCTION,INT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 18: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 18: Token <ID> Lexeme foo found
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <INT> Lexeme int found
type_specifier : INT
Line# 18: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 18: Token <RPAREN> Lexeme ) found
Line# 19: Token <LCURL> Lexeme { found
Line# 20: Token <ID> Lexeme y found
Line# 20: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 20: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 21: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.3
	10--> <a,INT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> 
	9--> <correct_foo,FUNCTION,INT> 
	10--> <a,FLOAT> <func,FUNCTION,INT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 23: Token <INT> Lexeme int found
type_specifier : INT
Line# 23: Token <ID> Lexeme foo2 found
Line# 23: Token <LPAREN> Lexeme ( found
Line# 23: Token <INT> Lexeme int found
type_specifier : INT
Line# 23: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 23: Token <COMMA> Lexeme , found
Line# 23: Token <INT> Lexeme int found
type_specifier : INT
Line# 23: Token <ID> Lexeme a found
parameter_list : parameter_list COMMA type_specifier ID
Line# 23: Token <COMMA> Lexeme , found
Line# 23: Token <FLOAT> Lexeme float found
type_specifier : FLOAT
Line# 23: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 23: Token <RPAREN> Lexeme ) found
Line# 24: Token <LCURL> Lexeme { found
Line# 25: Token <RETURN> Lexeme return found
Line# 25: Token <ID> Lexeme a found
Line# 25: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 25: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 25: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 26: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.4
	10--> <a,INT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> <foo,FUNCTION,VOID> 
	9--> <correct_foo,FUNCTION,INT> 
	10--> <a,FLOAT> <func,FUNCTION,INT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 28: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 28: Token <ID> Lexeme foo3 found
Line# 28: Token <LPAREN> Lexeme ( found
Line# 28: Token <INT> Lexeme int found
type_specifier : INT
Line# 28: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 28: Token <COMMA> Lexeme , found
Line# 28: Token <INT> Lexeme int found
type_specifier : INT
Line# 28: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 28: Token <RPAREN> Lexeme ) found
Line# 29: Token <LCURL> Lexeme { found
Line# 30: Token <ID> Lexeme y found
Line# 30: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 30: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 30: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 31: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.5
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	4--> <foo2,FUNCTION,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> <foo,FUNCTION,VOID> 
	9--> <correct_foo,FUNCTION,INT> 
	10--> <a,FLOAT> <func,FUNCTION,INT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 33: Token <INT> Lexeme int found
type_specifier : INT
Line# 33: Token <ID> Lexeme z found
Line# 33: Token <LPAREN> Lexeme ( found
Line# 33: Token <INT> Lexeme int found
type_specifier : INT
Line# 33: Token <ID> Lexeme d found
parameter_list : type_specifier ID
Line# 33: Token <RPAREN> Lexeme ) found
Line# 34: Token <LCURL> Lexeme { found
Line# 35: Token <RETURN> Lexeme return found
Line# 35: Token <ID> Lexeme d found
Line# 35: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 36: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.6
	2--> <d,INT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	4--> <foo2,FUNCTION,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> <foo,FUNCTION,VOID> 
	9--> <correct_foo,FUNCTION,INT> 
	10--> <a,FLOAT> <func,FUNCTION,INT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 38: Token <INT> Lexeme int found
type_specifier : INT
Line# 38: Token <ID> Lexeme var found
Line# 38: Token <LPAREN> Lexeme ( found
Line# 38: Token <INT> Lexeme int found
type_specifier : INT
Line# 38: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 38: Token <RPAREN> Lexeme ) found
Line# 39: Token <LCURL> Lexeme { found
Line# 40: Token <RETURN> Lexeme return found
Line# 40: Token <ID> Lexeme a found
Line# 40: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 41: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.7
	10--> <a,INT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	4--> <foo2,FUNCTION,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> <foo,FUNCTION,VOID> 
	9--> <correct_foo,FUNCTION,INT> 
	10--> <a,FLOAT> <func,FUNCTION,INT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 43: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 43: Token <ID> Lexeme foo4 found
Line# 43: Token <LPAREN> Lexeme ( found
Line# 43: Token <INT> Lexeme int found
type_specifier : INT
Line# 43: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 43: Token <RPAREN> Lexeme ) found
Line# 44: Token <LCURL> Lexeme { found
Line# 45: Token <RETURN> Lexeme return found
Line# 45: Token <ID> Lexeme a found
Line# 45: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 45: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 45: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 46: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.8
	10--> <a,INT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	4--> <foo2,FUNCTION,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> <foo,FUNCTION,VOID> 
	9--> <correct_foo,FUNCTION,INT> 
	10--> <a,FLOAT> <func,FUNCTION,INT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 48: Token <INT> Lexeme int found
type_specifier : INT
Line# 48: Token <ID> Lexeme main found
Line# 48: Token <LPAREN> Lexeme ( found
Line# 48: Token <RPAREN> Lexeme ) found
Line# 49: Token <LCURL> Lexeme { found
Line# 50: Token <INT> Lexeme int found
type_specifier : INT
Line# 50: Token <ID> Lexeme a found
Line# 50: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 50: Token <ID> Lexeme b found
Line# 50: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 50: Token <ID> Lexeme c found
Line# 50: Token <LSQUARE> Lexeme [ found
Line# 50: Token <CONST_INT> Lexeme 4 found
Line# 50: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE
Line# 50: Token <COMMA> Lexeme , found
Line# 50: Token <ID> Lexeme dd found
Line# 50: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 50: Token <ID> Lexeme ee found
Line# 50: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 51: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 51: Token <ID> Lexeme e found
Line# 51: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 52: Token <FLOAT> Lexeme float found
type_specifier : FLOAT
Line# 52: Token <ID> Lexeme a found
Line# 52: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 52: Token <ID> Lexeme c found
Line# 52: Token <LSQUARE> Lexeme [ found
Line# 52: Token <CONST_INT> Lexeme 7 found
Line# 52: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE
Line# 52: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 54: Token <ID> Lexeme func found
Line# 54: Token <LPAREN> Lexeme ( found
Line# 54: Token <CONST_FLOAT> Lexeme 2.5 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 54: Token <COMMA> Lexeme , found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 54: Token <CONST_FLOAT> Lexeme 3.5 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 54: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 54: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 56: Token <ID> Lexeme a found
Line# 56: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 56: Token <ID> Lexeme correct_foo found
Line# 56: Token <LPAREN> Lexeme ( found
Line# 56: Token <ID> Lexeme a found
Line# 56: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 56: Token <ID> Lexeme c found
Line# 56: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 56: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 57: Token <ID> Lexeme b found
Line# 57: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 57: Token <ID> Lexeme correct_foo found
Line# 57: Token <LPAREN> Lexeme ( found
Line# 57: Token <ID> Lexeme a found
Line# 57: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 57: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 58: Token <ID> Lexeme dd found
Line# 58: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 58: Token <ID> Lexeme correct_foo found
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <ID> Lexeme a found
Line# 58: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 58: Token <ID> Lexeme b found
Line# 58: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
Line# 58: Token <ID> Lexeme a found
Line# 58: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 58: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 60: Token <ID> Lexeme k found
Line# 60: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 60: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 60: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 60: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 60: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 61: Token <ID> Lexeme b found
Line# 61: Token <LSQUARE> Lexeme [ found
Line# 61: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 61: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 61: Token <ASSIGNOP> Lexeme = found
Line# 61: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 61: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 62: Token <ID> Lexeme c found
Line# 62: Token <LSQUARE> Lexeme [ found
Line# 62: Token <CONST_FLOAT> Lexeme 2.5 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 62: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 62: Token <ASSIGNOP> Lexeme = found
Line# 62: Token <CONST_INT> Lexeme 8 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 62: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 63: Token <ID> Lexeme c found
Line# 63: Token <LSQUARE> Lexeme [ found
Line# 63: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 63: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 63: Token <ASSIGNOP> Lexeme = found
Line# 63: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 63: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 63: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 63: Token <MULOP> Lexeme * found
Line# 63: Token <ID> Lexeme foo4 found
Line# 63: Token <LPAREN> Lexeme ( found
Line# 63: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 63: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : term MULOP unary_expression
Line# 63: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 64: Token <ID> Lexeme c found
Line# 64: Token <LSQUARE> Lexeme [ found
Line# 64: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 64: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 64: Token <ASSIGNOP> Lexeme = found
Line# 64: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 64: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 65: Token <ID> Lexeme foo4 found
Line# 65: Token <LPAREN> Lexeme ( found
Line# 65: Token <ID> Lexeme c found
Line# 65: Token <LSQUARE> Lexeme [ found
Line# 65: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 65: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 65: Token <RPAREN> Lexeme ) found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 65: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 66: Token <ID> Lexeme c found
Line# 66: Token <LSQUARE> Lexeme [ found
Line# 66: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 66: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 66: Token <ASSIGNOP> Lexeme = found
Line# 66: Token <ID> Lexeme foo4 found
Line# 66: Token <LPAREN> Lexeme ( found
Line# 66: Token <ID> Lexeme c found
Line# 66: Token <LSQUARE> Lexeme [ found
Line# 66: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 66: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 66: Token <RPAREN> Lexeme ) found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 66: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 67: Token <ID> Lexeme c found
Line# 67: Token <LSQUARE> Lexeme [ found
Line# 67: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 67: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 67: Token <ASSIGNOP> Lexeme = found
Line# 67: Token <CONST_FLOAT> Lexeme 2.7 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 67: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 68: Token <ID> Lexeme b found
Line# 68: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 68: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 68: Token <MULOP> Lexeme % found
Line# 68: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 68: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 69: Token <ID> Lexeme b found
Line# 69: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 69: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 69: Token <MULOP> Lexeme % found
Line# 69: Token <CONST_FLOAT> Lexeme 3.5 found
factor : CONST_FLOAT
unary_expression : factor
term : term MULOP unary_expression
Line# 69: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 70: Token <ID> Lexeme ee found
Line# 70: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 70: Token <CONST_FLOAT> Lexeme 4.6 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 70: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 72: Token <ID> Lexeme dd found
Line# 72: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 72: Token <ID> Lexeme foo5 found
Line# 72: Token <LPAREN> Lexeme ( found
Line# 72: Token <ID> Lexeme a found
Line# 72: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 72: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 74: Token <ID> Lexeme printf found
Line# 74: Token <LPAREN> Lexeme ( found
Line# 74: Token <ID> Lexeme h found
Line# 74: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 74: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 75: Token <RETURN> Lexeme return found
Line# 75: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 75: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 76: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.9
	1--> <c,ARRAY> 
	4--> <ee,INT> 
	8--> <dd,INT> 
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	1--> <y,INT> 
	2--> <z,INT> 
	4--> <foo2,FUNCTION,INT> 
	5--> <foo3,FUNCTION,INT> 
	6--> <var,FUNCTION,INT> <foo,FUNCTION,VOID> <foo4,FUNCTION,VOID> 
	9--> <correct_foo,FUNCTION,INT> 
	10--> <a,FLOAT> <func,FUNCTION,INT> 
	11--> <x,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total Lines: 77
Total Errors: 24
