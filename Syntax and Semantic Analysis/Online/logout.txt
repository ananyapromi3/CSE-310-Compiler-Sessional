Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme main found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <INT> Lexeme int found
type_specifier : INT
Line# 2: Token <ID> Lexeme i found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 2: Token <ID> Lexeme j found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 3: Token <ID> Lexeme i found
Line# 3: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 3: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 4: Token <LOOP> Lexeme loop found
Line# 4: Token <LCURL> Lexeme { found
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 5: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 6: Token <ID> Lexeme j found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 6: Token <ID> Lexeme i found
Line# 6: Token <MULOP> Lexeme * found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
Line# 6: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 7: Token <ID> Lexeme j found
Line# 7: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 7: Token <ID> Lexeme i found
Line# 7: Token <MULOP> Lexeme / found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
Line# 7: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 7: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 8: Token <ID> Lexeme j found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 8: Token <ID> Lexeme i found
Line# 8: Token <MULOP> Lexeme % found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
Line# 8: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 9: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.1.1
	ScopeTable# 1.1
	7--> <i,INT> 
	8--> <j,INT> 
statement : compound_statement
Line# 9: Token <WHILE> Lexeme while found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <ID> Lexeme i found
Line# 9: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 9: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 9: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
statement : LOOP statement WHILE LPAREN expression RPAREN SEMICOLON
statements : statements statement
Line# 10: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.1
	7--> <i,INT> 
	8--> <j,INT> 
	ScopeTable# 1
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit
start : program
Total Lines: 10
Total Errors: 0
